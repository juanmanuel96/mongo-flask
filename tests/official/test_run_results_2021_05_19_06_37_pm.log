Launching pytest with arguments /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask/tester.py in /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask

##teamcity[enteredTheMatrix timestamp='2021-05-19T18:33:31.348']
============================= test session starts ==============================
platform darwin -- Python 3.7.4, pytest-5.4.3, py-1.9.0, pluggy-0.13.1 -- /Users/juanvazquez/PythonProjects/MongoFlask/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask
collecting ... collected 20 items
##teamcity[testCount timestamp='2021-05-19T18:33:31.548' count='20']

tester.py::test_missing_complete_uri ##teamcity[testSuiteStarted timestamp='2021-05-19T18:33:31.550' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester' name='tester' nodeId='1' parentNodeId='0']
##teamcity[testStarted timestamp='2021-05-19T18:33:31.550' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_complete_uri' metainfo='test_missing_complete_uri' name='test_missing_complete_uri' nodeId='2' parentNodeId='1']
PASSED                              [  5%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.551' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_complete_uri' name='test_missing_complete_uri' nodeId='2' parentNodeId='1']

tester.py::test_missing_host ##teamcity[testStarted timestamp='2021-05-19T18:33:31.552' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_host' metainfo='test_missing_host' name='test_missing_host' nodeId='3' parentNodeId='1']
PASSED                                      [ 10%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.553' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_host' name='test_missing_host' nodeId='3' parentNodeId='1']

tester.py::test_missing_port ##teamcity[testStarted timestamp='2021-05-19T18:33:31.553' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_port' metainfo='test_missing_port' name='test_missing_port' nodeId='4' parentNodeId='1']
PASSED                                      [ 15%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.554' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_port' name='test_missing_port' nodeId='4' parentNodeId='1']

tester.py::test_missing_database ##teamcity[testStarted timestamp='2021-05-19T18:33:31.554' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_database' metainfo='test_missing_database' name='test_missing_database' nodeId='5' parentNodeId='1']
PASSED                                  [ 20%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.556' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_missing_database' name='test_missing_database' nodeId='5' parentNodeId='1']

tester.py::test_app_mongo ##teamcity[testStarted timestamp='2021-05-19T18:33:31.556' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_app_mongo' metainfo='test_app_mongo' name='test_app_mongo' nodeId='6' parentNodeId='1']
PASSED                                         [ 25%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.558' duration='1' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_app_mongo' name='test_app_mongo' nodeId='6' parentNodeId='1']

tester.py::test_client_type ##teamcity[testStarted timestamp='2021-05-19T18:33:31.559' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_client_type' metainfo='test_client_type' name='test_client_type' nodeId='7' parentNodeId='1']
PASSED                                       [ 30%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.560' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_client_type' name='test_client_type' nodeId='7' parentNodeId='1']

tester.py::test_database_type ##teamcity[testStarted timestamp='2021-05-19T18:33:31.561' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_database_type' metainfo='test_database_type' name='test_database_type' nodeId='8' parentNodeId='1']
PASSED                                     [ 35%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.562' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_database_type' name='test_database_type' nodeId='8' parentNodeId='1']

tester.py::test_collection_type ##teamcity[testStarted timestamp='2021-05-19T18:33:31.562' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_type' metainfo='test_collection_type' name='test_collection_type' nodeId='9' parentNodeId='1']
PASSED                                   [ 40%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.564' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_type' name='test_collection_type' nodeId='9' parentNodeId='1']

tester.py::test_collection_registration ##teamcity[testStarted timestamp='2021-05-19T18:33:31.564' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration' metainfo='test_collection_registration' name='test_collection_registration' nodeId='10' parentNodeId='1']
PASSED                           [ 45%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.568' duration='3' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration' name='test_collection_registration' nodeId='10' parentNodeId='1']

tester.py::test_collection_registration_empty ##teamcity[testStarted timestamp='2021-05-19T18:33:31.568' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_empty' metainfo='test_collection_registration_empty' name='test_collection_registration_empty' nodeId='11' parentNodeId='1']
PASSED                     [ 50%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.571' duration='2' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_empty' name='test_collection_registration_empty' nodeId='11' parentNodeId='1']

tester.py::test_collection_registration_not_in_db ##teamcity[testStarted timestamp='2021-05-19T18:33:31.572' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_not_in_db' metainfo='test_collection_registration_not_in_db' name='test_collection_registration_not_in_db' nodeId='12' parentNodeId='1']
PASSED                 [ 55%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.573' duration='0' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_not_in_db' name='test_collection_registration_not_in_db' nodeId='12' parentNodeId='1']

tester.py::test_collection_registration_invalid ##teamcity[testStarted timestamp='2021-05-19T18:33:31.574' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_invalid' metainfo='test_collection_registration_invalid' name='test_collection_registration_invalid' nodeId='13' parentNodeId='1']
PASSED                   [ 60%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.576' duration='1' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_registration_invalid' name='test_collection_registration_invalid' nodeId='13' parentNodeId='1']

tester.py::test_get_collection ##teamcity[testStarted timestamp='2021-05-19T18:33:31.577' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection' metainfo='test_get_collection' name='test_get_collection' nodeId='14' parentNodeId='1']
PASSED                                    [ 65%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.580' duration='2' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection' name='test_get_collection' nodeId='14' parentNodeId='1']

tester.py::test_get_collection_without_name ##teamcity[testStarted timestamp='2021-05-19T18:33:31.581' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection_without_name' metainfo='test_get_collection_without_name' name='test_get_collection_without_name' nodeId='15' parentNodeId='1']
PASSED                       [ 70%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.585' duration='3' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection_without_name' name='test_get_collection_without_name' nodeId='15' parentNodeId='1']

tester.py::test_get_collection_does_not_exist ##teamcity[testStarted timestamp='2021-05-19T18:33:31.585' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection_does_not_exist' metainfo='test_get_collection_does_not_exist' name='test_get_collection_does_not_exist' nodeId='16' parentNodeId='1']
PASSED                     [ 75%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.594' duration='7' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_get_collection_does_not_exist' name='test_get_collection_does_not_exist' nodeId='16' parentNodeId='1']

tester.py::test_collection_method_all ##teamcity[testStarted timestamp='2021-05-19T18:33:31.594' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_all' metainfo='test_collection_method_all' name='test_collection_method_all' nodeId='17' parentNodeId='1']
PASSED                             [ 80%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.602' duration='7' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_all' name='test_collection_method_all' nodeId='17' parentNodeId='1']

tester.py::test_collection_method_all_correct_document_set_length ##teamcity[testStarted timestamp='2021-05-19T18:33:31.603' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_all_correct_document_set_length' metainfo='test_collection_method_all_correct_document_set_length' name='test_collection_method_all_correct_document_set_length' nodeId='18' parentNodeId='1']
PASSED [ 85%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.610' duration='6' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_all_correct_document_set_length' name='test_collection_method_all_correct_document_set_length' nodeId='18' parentNodeId='1']

tester.py::test_collection_method_filter ##teamcity[testStarted timestamp='2021-05-19T18:33:31.611' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_filter' metainfo='test_collection_method_filter' name='test_collection_method_filter' nodeId='19' parentNodeId='1']
FAILED                          [ 90%]##teamcity[testFailed timestamp='2021-05-19T18:33:31.677' details='def test_collection_method_filter():|n        app_config()|n        register_collection_for_test()|n        collection = mongo.get_collection(|'testing|')|n>       docu_set = collection.filter(desc=|'this is a test document|')|n|ntester.py:178: |n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |nmongo_flask/core/collections.py:116: in filter|n    cursor = super().find(**kwargs)|n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |n|nself = Collection(Database(MongoClient(host=|[|'localhost:27017|'|], document_class=dict, tz_aware=False, connect=True), |'mongo_flask|'), |'testing|')|nargs = (), kwargs = {|'desc|': |'this is a test document|'}|n|n    def find(self, *args, **kwargs):|n        """Query the database.|n    |n        The `filter` argument is a prototype document that all results|n        must match. For example:|n    |n        >>> db.test.find({"hello": "world"})|n    |n        only matches documents that have a key "hello" with value|n        "world".  Matches can have other keys *in addition* to|n        "hello". The `projection` argument is used to specify a subset|n        of fields that should be included in the result documents. By|n        limiting results to a certain subset of fields you can cut|n        down on network traffic and decoding time.|n    |n        Raises :class:`TypeError` if any of the arguments are of|n        improper type. Returns an instance of|n        :class:`~pymongo.cursor.Cursor` corresponding to this query.|n    |n        The :meth:`find` method obeys the :attr:`read_preference` of|n        this :class:`Collection`.|n    |n        :Parameters:|n          - `filter` (optional): a SON object specifying elements which|n            must be present for a document to be included in the|n            result set|n          - `projection` (optional): a list of field names that should be|n            returned in the result set or a dict specifying the fields|n            to include or exclude. If `projection` is a list "_id" will|n            always be returned. Use a dict to exclude fields from|n            the result (e.g. projection={|'_id|': False}).|n          - `session` (optional): a|n            :class:`~pymongo.client_session.ClientSession`.|n          - `skip` (optional): the number of documents to omit (from|n            the start of the result set) when returning the results|n          - `limit` (optional): the maximum number of results to|n            return. A limit of 0 (the default) is equivalent to setting no|n            limit.|n          - `no_cursor_timeout` (optional): if False (the default), any|n            returned cursor is closed by the server after 10 minutes of|n            inactivity. If set to True, the returned cursor will never|n            time out on the server. Care should be taken to ensure that|n            cursors with no_cursor_timeout turned on are properly closed.|n          - `cursor_type` (optional): the type of cursor to return. The valid|n            options are defined by :class:`~pymongo.cursor.CursorType`:|n    |n            - :attr:`~pymongo.cursor.CursorType.NON_TAILABLE` - the result of|n              this find call will return a standard cursor over the result set.|n            - :attr:`~pymongo.cursor.CursorType.TAILABLE` - the result of this|n              find call will be a tailable cursor - tailable cursors are only|n              for use with capped collections. They are not closed when the|n              last data is retrieved but are kept open and the cursor location|n              marks the final document position. If more data is received|n              iteration of the cursor will continue from the last document|n              received. For details, see the `tailable cursor documentation|n              <http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_.|n            - :attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` - the result|n              of this find call will be a tailable cursor with the await flag|n              set. The server will wait for a few seconds after returning the|n              full result set so that it can capture and return additional data|n              added during the query.|n            - :attr:`~pymongo.cursor.CursorType.EXHAUST` - the result of this|n              find call will be an exhaust cursor. MongoDB will stream batched|n              results to the client without waiting for the client to request|n              each batch, reducing latency. See notes on compatibility below.|n    |n          - `sort` (optional): a list of (key, direction) pairs|n            specifying the sort order for this query. See|n            :meth:`~pymongo.cursor.Cursor.sort` for details.|n          - `allow_partial_results` (optional): if True, mongos will return|n            partial results if some shards are down instead of returning an|n            error.|n          - `oplog_replay` (optional): If True, set the oplogReplay query|n            flag.|n          - `batch_size` (optional): Limits the number of documents returned in|n            a single batch.|n          - `manipulate` (optional): **DEPRECATED** - If True (the default),|n            apply any outgoing SON manipulators before returning.|n          - `collation` (optional): An instance of|n            :class:`~pymongo.collation.Collation`. This option is only supported|n            on MongoDB 3.4 and above.|n          - `return_key` (optional): If True, return only the index keys in|n            each document.|n          - `show_record_id` (optional): If True, adds a field ``$recordId`` in|n            each document with the storage engine|'s internal record identifier.|n          - `snapshot` (optional): **DEPRECATED** - If True, prevents the|n            cursor from returning a document more than once because of an|n            intervening write operation.|n          - `hint` (optional): An index, in the same format as passed to|n            :meth:`~pymongo.collection.Collection.create_index` (e.g.|n            ``|[(|'field|', ASCENDING)|]``). Pass this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.hint` on the cursor to tell Mongo the|n            proper index to use for the query.|n          - `max_time_ms` (optional): Specifies a time limit for a query|n            operation. If the specified time is exceeded, the operation will be|n            aborted and :exc:`~pymongo.errors.ExecutionTimeout` is raised. Pass|n            this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.max_time_ms` on the cursor.|n          - `max_scan` (optional): **DEPRECATED** - The maximum number of|n            documents to scan. Pass this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.max_scan` on the cursor.|n          - `min` (optional): A list of field, limit pairs specifying the|n            inclusive lower bound for all keys of a specific index in order.|n            Pass this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.min` on the cursor. ``hint`` must|n            also be passed to ensure the query utilizes the correct index.|n          - `max` (optional): A list of field, limit pairs specifying the|n            exclusive upper bound for all keys of a specific index in order.|n            Pass this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.max` on the cursor. ``hint`` must|n            also be passed to ensure the query utilizes the correct index.|n          - `comment` (optional): A string to attach to the query to help|n            interpret and trace the operation in the server logs and in profile|n            data. Pass this as an alternative to calling|n            :meth:`~pymongo.cursor.Cursor.comment` on the cursor.|n          - `modifiers` (optional): **DEPRECATED** - A dict specifying|n            additional MongoDB query modifiers. Use the keyword arguments listed|n            above instead.|n    |n        .. note:: There are a number of caveats to using|n          :attr:`~pymongo.cursor.CursorType.EXHAUST` as cursor_type:|n    |n          - The `limit` option can not be used with an exhaust cursor.|n    |n          - Exhaust cursors are not supported by mongos and can not be|n            used with a sharded cluster.|n    |n          - A :class:`~pymongo.cursor.Cursor` instance created with the|n            :attr:`~pymongo.cursor.CursorType.EXHAUST` cursor_type requires an|n            exclusive :class:`~socket.socket` connection to MongoDB. If the|n            :class:`~pymongo.cursor.Cursor` is discarded without being|n            completely iterated the underlying :class:`~socket.socket`|n            connection will be closed and discarded without being returned to|n            the connection pool.|n    |n        .. versionchanged:: 3.7|n           Deprecated the `snapshot` option, which is deprecated in MongoDB|n           3.6 and removed in MongoDB 4.0.|n           Deprecated the `max_scan` option. Support for this option is|n           deprecated in MongoDB 4.0. Use `max_time_ms` instead to limit server|n           side execution time.|n    |n    |n        .. versionchanged:: 3.6|n           Added ``session`` parameter.|n    |n        .. versionchanged:: 3.5|n           Added the options `return_key`, `show_record_id`, `snapshot`,|n           `hint`, `max_time_ms`, `max_scan`, `min`, `max`, and `comment`.|n           Deprecated the option `modifiers`.|n    |n        .. versionchanged:: 3.4|n           Support the `collation` option.|n    |n        .. versionchanged:: 3.0|n           Changed the parameter names `spec`, `fields`, `timeout`, and|n           `partial` to `filter`, `projection`, `no_cursor_timeout`, and|n           `allow_partial_results` respectively.|n           Added the `cursor_type`, `oplog_replay`, and `modifiers` options.|n           Removed the `network_timeout`, `read_preference`, `tag_sets`,|n           `secondary_acceptable_latency_ms`, `max_scan`, `snapshot`,|n           `tailable`, `await_data`, `exhaust`, `as_class`, and slave_okay|n           parameters. Removed `compile_re` option: PyMongo now always|n           represents BSON regular expressions as :class:`~bson.regex.Regex`|n           objects. Use :meth:`~bson.regex.Regex.try_compile` to attempt to|n           convert from a BSON regular expression to a Python regular|n           expression object. Soft deprecated the `manipulate` option.|n    |n        .. versionchanged:: 2.7|n           Added `compile_re` option. If set to False, PyMongo represented BSON|n           regular expressions as :class:`~bson.regex.Regex` objects instead of|n           attempting to compile BSON regular expressions as Python native|n           regular expressions, thus preventing errors for some incompatible|n           patterns, see `PYTHON-500`_.|n    |n        .. versionadded:: 2.3|n           The `tag_sets` and `secondary_acceptable_latency_ms` parameters.|n    |n        .. _PYTHON-500: https://jira.mongodb.org/browse/PYTHON-500|n    |n        .. mongodoc:: find|n    |n        """|n>       return Cursor(self, *args, **kwargs)|nE       TypeError: __init__() got an unexpected keyword argument |'desc|'|n|n../venv/lib/python3.7/site-packages/pymongo/collection.py:1460: TypeError' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_filter' message='tester.py:173 (test_collection_method_filter)' name='test_collection_method_filter' nodeId='19' parentNodeId='1']
##teamcity[testFinished timestamp='2021-05-19T18:33:31.678' duration='2' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_filter' name='test_collection_method_filter' nodeId='19' parentNodeId='1']

tester.py::test_collection_method_get ##teamcity[testStarted timestamp='2021-05-19T18:33:31.678' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_get' metainfo='test_collection_method_get' name='test_collection_method_get' nodeId='20' parentNodeId='1']
FAILED                             [ 95%]##teamcity[testFailed timestamp='2021-05-19T18:33:31.685' details='def test_collection_method_get():|n        app_config()|n        register_collection_for_test()|n        collection = mongo.get_collection(|'testing|')|n        document = collection.get(doc_num=|'doc0|')|n>       assert isinstance(document, Document) and isinstance(document.doc_num, StringField)|nE       AttributeError: |'Document|' object has no attribute |'doc_num|'|n|ntester.py:187: AttributeError' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_get' message='tester.py:181 (test_collection_method_get)' name='test_collection_method_get' nodeId='20' parentNodeId='1']
##teamcity[testFinished timestamp='2021-05-19T18:33:31.686' duration='3' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_get' name='test_collection_method_get' nodeId='20' parentNodeId='1']

tester.py::test_collection_method_get_empty ##teamcity[testStarted timestamp='2021-05-19T18:33:31.686' captureStandardOutput='false' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_get_empty' metainfo='test_collection_method_get_empty' name='test_collection_method_get_empty' nodeId='21' parentNodeId='1']
PASSED                       [100%]##teamcity[testFinished timestamp='2021-05-19T18:33:31.690' duration='3' locationHint='python</Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask>://tester.test_collection_method_get_empty' name='test_collection_method_get_empty' nodeId='21' parentNodeId='1']


=================================== FAILURES ===================================
________________________ test_collection_method_filter _________________________

    def test_collection_method_filter():
        app_config()
        register_collection_for_test()
        collection = mongo.get_collection('testing')
>       docu_set = collection.filter(desc='this is a test document')

tester.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
mongo_flask/core/collections.py:116: in filter
    cursor = super().find(**kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Collection(Database(MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True), 'mongo_flask'), 'testing')
args = (), kwargs = {'desc': 'this is a test document'}

    def find(self, *args, **kwargs):
        """Query the database.
    
        The `filter` argument is a prototype document that all results
        must match. For example:
    
        >>> db.test.find({"hello": "world"})
    
        only matches documents that have a key "hello" with value
        "world".  Matches can have other keys *in addition* to
        "hello". The `projection` argument is used to specify a subset
        of fields that should be included in the result documents. By
        limiting results to a certain subset of fields you can cut
        down on network traffic and decoding time.
    
        Raises :class:`TypeError` if any of the arguments are of
        improper type. Returns an instance of
        :class:`~pymongo.cursor.Cursor` corresponding to this query.
    
        The :meth:`find` method obeys the :attr:`read_preference` of
        this :class:`Collection`.
    
        :Parameters:
          - `filter` (optional): a SON object specifying elements which
            must be present for a document to be included in the
            result set
          - `projection` (optional): a list of field names that should be
            returned in the result set or a dict specifying the fields
            to include or exclude. If `projection` is a list "_id" will
            always be returned. Use a dict to exclude fields from
            the result (e.g. projection={'_id': False}).
          - `session` (optional): a
            :class:`~pymongo.client_session.ClientSession`.
          - `skip` (optional): the number of documents to omit (from
            the start of the result set) when returning the results
          - `limit` (optional): the maximum number of results to
            return. A limit of 0 (the default) is equivalent to setting no
            limit.
          - `no_cursor_timeout` (optional): if False (the default), any
            returned cursor is closed by the server after 10 minutes of
            inactivity. If set to True, the returned cursor will never
            time out on the server. Care should be taken to ensure that
            cursors with no_cursor_timeout turned on are properly closed.
          - `cursor_type` (optional): the type of cursor to return. The valid
            options are defined by :class:`~pymongo.cursor.CursorType`:
    
            - :attr:`~pymongo.cursor.CursorType.NON_TAILABLE` - the result of
              this find call will return a standard cursor over the result set.
            - :attr:`~pymongo.cursor.CursorType.TAILABLE` - the result of this
              find call will be a tailable cursor - tailable cursors are only
              for use with capped collections. They are not closed when the
              last data is retrieved but are kept open and the cursor location
              marks the final document position. If more data is received
              iteration of the cursor will continue from the last document
              received. For details, see the `tailable cursor documentation
              <http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_.
            - :attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` - the result
              of this find call will be a tailable cursor with the await flag
              set. The server will wait for a few seconds after returning the
              full result set so that it can capture and return additional data
              added during the query.
            - :attr:`~pymongo.cursor.CursorType.EXHAUST` - the result of this
              find call will be an exhaust cursor. MongoDB will stream batched
              results to the client without waiting for the client to request
              each batch, reducing latency. See notes on compatibility below.
    
          - `sort` (optional): a list of (key, direction) pairs
            specifying the sort order for this query. See
            :meth:`~pymongo.cursor.Cursor.sort` for details.
          - `allow_partial_results` (optional): if True, mongos will return
            partial results if some shards are down instead of returning an
            error.
          - `oplog_replay` (optional): If True, set the oplogReplay query
            flag.
          - `batch_size` (optional): Limits the number of documents returned in
            a single batch.
          - `manipulate` (optional): **DEPRECATED** - If True (the default),
            apply any outgoing SON manipulators before returning.
          - `collation` (optional): An instance of
            :class:`~pymongo.collation.Collation`. This option is only supported
            on MongoDB 3.4 and above.
          - `return_key` (optional): If True, return only the index keys in
            each document.
          - `show_record_id` (optional): If True, adds a field ``$recordId`` in
            each document with the storage engine's internal record identifier.
          - `snapshot` (optional): **DEPRECATED** - If True, prevents the
            cursor from returning a document more than once because of an
            intervening write operation.
          - `hint` (optional): An index, in the same format as passed to
            :meth:`~pymongo.collection.Collection.create_index` (e.g.
            ``[('field', ASCENDING)]``). Pass this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.hint` on the cursor to tell Mongo the
            proper index to use for the query.
          - `max_time_ms` (optional): Specifies a time limit for a query
            operation. If the specified time is exceeded, the operation will be
            aborted and :exc:`~pymongo.errors.ExecutionTimeout` is raised. Pass
            this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.max_time_ms` on the cursor.
          - `max_scan` (optional): **DEPRECATED** - The maximum number of
            documents to scan. Pass this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.max_scan` on the cursor.
          - `min` (optional): A list of field, limit pairs specifying the
            inclusive lower bound for all keys of a specific index in order.
            Pass this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.min` on the cursor. ``hint`` must
            also be passed to ensure the query utilizes the correct index.
          - `max` (optional): A list of field, limit pairs specifying the
            exclusive upper bound for all keys of a specific index in order.
            Pass this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.max` on the cursor. ``hint`` must
            also be passed to ensure the query utilizes the correct index.
          - `comment` (optional): A string to attach to the query to help
            interpret and trace the operation in the server logs and in profile
            data. Pass this as an alternative to calling
            :meth:`~pymongo.cursor.Cursor.comment` on the cursor.
          - `modifiers` (optional): **DEPRECATED** - A dict specifying
            additional MongoDB query modifiers. Use the keyword arguments listed
            above instead.
    
        .. note:: There are a number of caveats to using
          :attr:`~pymongo.cursor.CursorType.EXHAUST` as cursor_type:
    
          - The `limit` option can not be used with an exhaust cursor.
    
          - Exhaust cursors are not supported by mongos and can not be
            used with a sharded cluster.
    
          - A :class:`~pymongo.cursor.Cursor` instance created with the
            :attr:`~pymongo.cursor.CursorType.EXHAUST` cursor_type requires an
            exclusive :class:`~socket.socket` connection to MongoDB. If the
            :class:`~pymongo.cursor.Cursor` is discarded without being
            completely iterated the underlying :class:`~socket.socket`
            connection will be closed and discarded without being returned to
            the connection pool.
    
        .. versionchanged:: 3.7
           Deprecated the `snapshot` option, which is deprecated in MongoDB
           3.6 and removed in MongoDB 4.0.
           Deprecated the `max_scan` option. Support for this option is
           deprecated in MongoDB 4.0. Use `max_time_ms` instead to limit server
           side execution time.
    
    
        .. versionchanged:: 3.6
           Added ``session`` parameter.
    
        .. versionchanged:: 3.5
           Added the options `return_key`, `show_record_id`, `snapshot`,
           `hint`, `max_time_ms`, `max_scan`, `min`, `max`, and `comment`.
           Deprecated the option `modifiers`.
    
        .. versionchanged:: 3.4
           Support the `collation` option.
    
        .. versionchanged:: 3.0
           Changed the parameter names `spec`, `fields`, `timeout`, and
           `partial` to `filter`, `projection`, `no_cursor_timeout`, and
           `allow_partial_results` respectively.
           Added the `cursor_type`, `oplog_replay`, and `modifiers` options.
           Removed the `network_timeout`, `read_preference`, `tag_sets`,
           `secondary_acceptable_latency_ms`, `max_scan`, `snapshot`,
           `tailable`, `await_data`, `exhaust`, `as_class`, and slave_okay
           parameters. Removed `compile_re` option: PyMongo now always
           represents BSON regular expressions as :class:`~bson.regex.Regex`
           objects. Use :meth:`~bson.regex.Regex.try_compile` to attempt to
           convert from a BSON regular expression to a Python regular
           expression object. Soft deprecated the `manipulate` option.
    
        .. versionchanged:: 2.7
           Added `compile_re` option. If set to False, PyMongo represented BSON
           regular expressions as :class:`~bson.regex.Regex` objects instead of
           attempting to compile BSON regular expressions as Python native
           regular expressions, thus preventing errors for some incompatible
           patterns, see `PYTHON-500`_.
    
        .. versionadded:: 2.3
           The `tag_sets` and `secondary_acceptable_latency_ms` parameters.
    
        .. _PYTHON-500: https://jira.mongodb.org/browse/PYTHON-500
    
        .. mongodoc:: find
    
        """
>       return Cursor(self, *args, **kwargs)
E       TypeError: __init__() got an unexpected keyword argument 'desc'

../venv/lib/python3.7/site-packages/pymongo/collection.py:1460: TypeError
__________________________ test_collection_method_get __________________________

    def test_collection_method_get():
        app_config()
        register_collection_for_test()
        collection = mongo.get_collection('testing')
        document = collection.get(doc_num='doc0')
>       assert isinstance(document, Document) and isinstance(document.doc_num, StringField)
E       AttributeError: 'Document' object has no attribute 'doc_num'

tester.py:187: AttributeError
=============================== warnings summary ===============================
tester.py:15
  /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask/tester.py:15: PytestCollectionWarning: cannot collect test class 'Testing' because it has a __init__ constructor (from: tester.py)
    class Testing(CollectionModel):

tester.py:22
  /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask/tester.py:22: PytestCollectionWarning: cannot collect test class 'Testing2' because it has a __init__ constructor (from: tester.py)
    class Testing2(CollectionModel):

tester.py:30
  /Users/juanvazquez/PythonProjects/MongoFlask/mongo-flask/tester.py:30: PytestCollectionWarning: cannot collect test class 'Testing3' because it has a __init__ constructor (from: tester.py)
    class Testing3(CollectionModel):

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED tester.py::test_collection_method_filter - TypeError: __init__() got a...
FAILED tester.py::test_collection_method_get - AttributeError: 'Document' obj...
=================== 2 failed, 18 passed, 3 warnings in 0.34s ===================

NOTES:
    - Filter method did not accept keyword argument. Fix this
    - Get method works correctly but test was not written correctly. Document object should use get method from 
    dictionary.
